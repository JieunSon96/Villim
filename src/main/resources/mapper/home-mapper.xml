<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Home">
	<select id="getGapDate" parameterType="map" resultType="Payment">
		select * from payment
		where
		payment_state = 3 and checkin
		between to_date(#{start}, 'yyyy/MM/dd') and to_date(#{end},
		'yyyy/MM/dd')
		<if test="home_seq == 0">
			and host_email = #{host_email}
		</if>
		<if test="home_seq gt 0">
			and home_seq = #{home_seq}
		</if>
		
	</select>

	<select id="getAllPayment" parameterType="map"
		resultType="Payment">
		select * from account a,member m, payment p
		where a.host_email =
		p.host_email
		and m.member_email = p.member_email
		<if test="home_seq == 0">
			and a.host_email = #{member_email}
		</if>
		<if test="home_seq gt 0">
			and home_seq in
			(select home_seq from home
			where
			member_email = #{member_email} and home_seq = #{home_seq})
		</if>
		order by p.payment_seq
	</select>

	<select id="getAllAccount" resultType="Account">
		select * from account a,
		member m
		where m.member_email = a.host_email
		and
		m.member_email=#{member_email}
	</select>

	<select id="getAllHomeData" parameterType="String"
		resultType="Home">
		select * from Home where member_email= #{member_email}
	</select>

	<select id="getOldestHomeData" resultType="Home">
		select * from (select
		* from home
		where member_email = #{member_email} order by home_seq)
		where rownum = 1
	</select>

	<select id="getHomeData" parameterType="int" resultType="Home">
		select *
		from home where home_seq = #{home_seq}
	</select>

	<select id="getHomePicData" parameterType="int"
		resultType="HomePic">
		select * from home_pic where home_seq = #{seq} order by
		home_pic_seq
	</select>

	<select id="getCalendarDate" parameterType="map"
		resultType="String">
		select * from(
		select start_day + level -1 days
		from(
		select
		to_date(#{start}, 'yyyy/mm/dd') start_day,
		to_date(#{end},
		'yyyy/mm/dd') end_day from dual)
		connect by start_day + level -1 <![CDATA[ <= ]]>
		end_day) order by days asc
	</select>

	<select id="getBlockedDate" parameterType="int"
		resultType="String">
		select home_blocked_date from home where home_seq =
		#{home_seq}
	</select>

	<select id="getAllReservation" parameterType="String"
		resultType="Reservation">
		select * from member m, reservation r, home h
		where
		m.member_email = r.member_email and h.home_seq = r.home_seq and
		r.host_email = #{host_email} order by reserv_date desc
	</select>

	<select id="getReservation" resultType="Reservation">
		select * from member m,
		reservation r, home h
		where
		m.member_email = r.member_email and
		h.home_seq = r.home_seq and
		r.home_seq = #{home_seq} order by
		reserv_date desc
	</select>

	<select id="getWaitReservation" resultType="Reservation"
		parameterType="map">
		select * from member m, reservation r, home h
		where
		m.member_email = r.member_email and h.home_seq = r.home_seq and
		r.host_email = #{member_email} and r.reserv_state = ${reserv_state}
		order by
		reserv_date desc
	</select>

	<select id="getApprovalReservation" resultType="Reservation"
		parameterType="map">
		select * from member m, reservation r, home h
		where
		m.member_email = r.member_email and h.home_seq = r.home_seq and
		r.host_email = #{member_email} and r.reserv_state = ${reserv_state}
		order by
		reserv_date desc
	</select>

	<select id="getCalReservation" parameterType="map"
		resultType="Reservation">
		select * from reservation r, member m
		where r.member_email =
		m.member_email and
		r.home_seq = #{home_seq} and r.reserv_state =
		#{reserv_state}
	</select>

	<select id="getAllMessage" resultType="Message">
		select * from message mg,
		member m, home h
		where mg.fromid = m.member_email and
		mg.home_seq =
		h.home_seq and
		h.member_email = #{member_email}
	</select>


	<select id="getAllGuestReview" resultType="GuestReview"
		parameterType="map">
		<!-- select * from guest_review g, host_review h where -->
		<!-- g.g_review_seq = -->
		<!-- h.g_review_seq and h.home_seq IN -->
		<!-- (select -->
		<!-- home_seq from -->
		<!-- home where -->
		<!-- member_email = #{member_email} -->
		<!-- <if test="home_seq gt 0"> -->
		<!-- and home_seq = #{home_seq} -->
		<!-- </if> -->
		<!-- ) -->
		select g.*, m.member_name, m.MEMBER_PICTURE from
		(select
		h1.h_review_public, g1.*, row_number()
		over(order by g1.G_REVIEW_DATE)
		as num from guest_review g1, host_review h1
		where
		g1.g_review_seq=h1.g_review_seq(+) and g1.home_seq
		<if test="home_seq == 0">
			in(select
			home_seq from
			home where
			member_email =
			#{member_email} ))g, member m
			where num between #{startNum} and
			#{endNum} and m.member_email = g.member_email
		</if>
		<if test="home_seq gt 0">
			= #{home_seq})g, member m
			where num between #{startNum} and
			#{endNum}
			and
			m.member_email = g.member_email
		</if>
	</select>

	<select id="getGuestReviewPaging" parameterType="map"
		resultType="int">
		select count(*) as totalCount from guest_review
		where home_seq
		<if test="home_seq == 0">
			in (select
			home_seq from
			home where
			member_email =
			#{member_email})
		</if>
		<if test="home_seq gt 0">
			= #{home_seq}
		</if>
	</select>

	<select id="getAllHostReview" parameterType="int"
		resultType="HostReview">
		select * from host_review where host_seq = #{host_seq}
	</select>

	<select id="guestReviewCount" parameterType="map"
		resultType="int">
		select count(*) as count from guest_review where home_seq IN
		(select
		home_seq from home where member_email=#{member_email}
		<if test="home_seq gt 0">
			and home_seq = #{home_seq}
		</if>
		)
	</select>
	<select id="getGuestHostJoin" resultType="GuestReview">
		select * from
		guest_review g, host_review h
		where g.g_review_seq = h.g_review_seq
	</select>

	<select id="getSatisfaction" resultType="GuestReview"
		parameterType="int">
		select
		G_REVIEW_SATISFACTION, count(G_REVIEW_SATISFACTION) as count
		from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by G_REVIEW_SATISFACTION having
		G_REVIEW_SATISFACTION
		in(5,4,3,2,1)
		order by G_REVIEW_SATISFACTION desc

	</select>

	<select id="getAccuracy" resultType="GuestReview">
		select
		G_REVIEW_ACCURACY
		,
		count(G_REVIEW_ACCURACY) as count from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by
		G_REVIEW_ACCURACY having
		G_REVIEW_ACCURACY
		in(5,4,3,2,1)
		order by
		G_REVIEW_ACCURACY desc
	</select>



	<select id="getCleanLiness" resultType="GuestReview">
		select
		G_REVIEW_CLEANLINESS , count(G_REVIEW_CLEANLINESS) as count from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by G_REVIEW_CLEANLINESS having
		G_REVIEW_CLEANLINESS
		in(5,4,3,2,1)
		order by G_REVIEW_CLEANLINESS desc
	</select>

	<select id="getCheckin" resultType="GuestReview">
		select
		G_REVIEW_CHECKIN ,
		count(G_REVIEW_CHECKIN) as count from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by
		G_REVIEW_CHECKIN having
		G_REVIEW_CHECKIN
		in(5,4,3,2,1)
		order by
		G_REVIEW_CHECKIN desc
	</select>

	<select id="getAmenities" resultType="GuestReview">
		select
		G_REVIEW_AMENITIES,
		count(G_REVIEW_AMENITIES) as count from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by
		G_REVIEW_AMENITIES having
		G_REVIEW_AMENITIES
		in(5,4,3,2,1)
		order
		by
		G_REVIEW_AMENITIES desc
	</select>

	<select id="getCommunication" resultType="GuestReview">
		select
		G_REVIEW_COMMUNICATION , count(G_REVIEW_COMMUNICATION) as count
		from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by G_REVIEW_COMMUNICATION having
		G_REVIEW_COMMUNICATION
		in(5,4,3,2,1)
		order by G_REVIEW_COMMUNICATION
		desc
	</select>

	<select id="getLocation" resultType="GuestReview">
		select
		G_REVIEW_LOCATION
		,
		count(G_REVIEW_LOCATION) as count from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by
		G_REVIEW_LOCATION having
		G_REVIEW_LOCATION
		in(5,4,3,2,1)
		order by
		G_REVIEW_LOCATION desc
	</select>

	<select id="getValue" resultType="GuestReview">
		select
		G_REVIEW_VALUE,
		count(G_REVIEW_VALUE) as count from
		guest_review
		<if test="value gt 0">
			where home_seq = #{home_seq}
		</if>
		group by
		G_REVIEW_VALUE
		having
		G_REVIEW_VALUE
		in(5,4,3,2,1)
		order by
		G_REVIEW_VALUE desc
	</select>

	<!-- 예지 -->
	<select id="getAllHomeDataMain" resultType="Home">
      select * from home order by home_seq
   </select>
	
   <select id="getHomeOnMap" resultType="Home" parameterType="map" >
      select * from home 
      where home_lat between #{swLat} and #{neLat} 
      	and home_lng between #{swLng} and #{neLng} 
      	and home_people >= #{people}
      	and home_price >= #{minMoney}
   		<if test="!homeType.equalsIgnoreCase('0')">
            and home_type = #{homeType}
         </if>
         <if test="dateIsChecked.equalsIgnoreCase('1')">
         	and home_blocked_date is null or
         	<trim suffixOverrides="and">
            <foreach collection="dates" item="type">
            	home_blocked_date not like '%${type}%' and
        	</foreach>
        	</trim>
         </if>
   </select>
   
   <select id="modalHomeData" resultType="Home" parameterType="map" >
      select * from home where home_people >= #{people} and home_price >= #{minMoney}
         <if test="homeTypeIsChecked.equalsIgnoreCase('1')">
         	and 
	         <trim suffixOverrides="or">
	         <foreach collection="homeTypeList" item="type">
	            home_type = #{type} or
	        </foreach>
	        </trim>
        </if>
         <if test="dateIsChecked.equalsIgnoreCase('1')">
         	and home_blocked_date is null or
         	<trim suffixOverrides="and">
            <foreach collection="dates" item="type">
            	home_blocked_date not like '%${type}%' and
        	</foreach>
        	</trim>
         </if>
   </select>
   
   <select id="getParis" resultType="Home">
		select * from Home where home_nation = '프랑스'
	</select>
	
	 <select id="getNewyork" resultType="Home">
		select * from Home where home_nation = '미국'
	</select>
	
	<select id="getRome" resultType="Home">
		select * from Home where home_nation = '이탈리아'
	</select>
	
	<select id="getLondon" resultType="Home">
		select * from Home where home_nation = '영국'
	</select>
	
	<select id="getPraha" resultType="Home">
		select * from Home where home_nation = '체코'
	</select>
	
	<select id="getMadrid" resultType="Home">
		select * from Home where home_nation = '스페인'
	</select>

	<select id="searchHomeData" resultType="Home"
		parameterType="map">
		select * from home where home_people >= #{people}
		<if test="homeTypeIsChecked.equalsIgnoreCase('1')">
			and
			<trim suffixOverrides="or">
				<foreach collection="homeTypeList" item="type">
					home_type = #{type}
					or
				</foreach>
			</trim>
		</if>
		<if test="dateIsChecked.equalsIgnoreCase('1')">
			and home_blocked_date is null or
			<trim suffixOverrides="and">
				<foreach collection="dates" item="type">
					home_blocked_date not like
					'%${type}%' and
				</foreach>
			</trim>
		</if>
	</select>

	<!-- 지혜 -->
	<select id="getBedData" parameterType="int" resultType="Bed">
		select *
		from bed where home_seq = #{home_seq}
	</select>
	
	<!-- 찬연 -->
	
	<insert id="firststepbyone" parameterType="Home">
		insert into home value (home_seq,member_email,home_buildingType,home_type,home_people,home_nation,home_addr1,home_addr2,
		home_addr3,home_addr4,home_lat,home_lng,home_amenities,home_safety,home_step) 
		values (home_seq.nextval,#{member_email},#{home_buildingType},#{home_type},#{home_people},#{home_nation},
		#{home_addr1},#{home_addr2},#{home_addr3},#{home_addr4},#{home_lat},#{home_lng},#{home_amenities},#{home_safety},'1')
	</insert>
	
	<insert id="firststeptoinsert" parameterType="Home">
		insert into home value (home_seq,member_email,home_step) values (home_seq.nextval,#{member_email},'1')
	</insert>
	
	<select id="getNesestHomeData" resultType="Home" parameterType="String">
		 select * from (select
    	* from home where member_email = #{member_email} order by home_seq desc) where rownum = 1
	</select>
	
	<update id="firststeptomodify" parameterType="Home">
		update home set home_type =#{home_type}, home_buildingType =#{home_buildingType},
		home_people = #{home_people}, home_nation = #{home_nation} , home_addr1 = #{home_addr1} , home_addr2 = #{home_addr2}, 
		home_addr3 = #{home_addr3}, home_addr4 = #{home_addr4} , home_lat = #{home_lat} , home_lng=#{home_lng},
		home_amenities = #{home_amenities} , home_safety = #{home_safety} where home_seq =#{home_seq}
	</update>
	
	<!-- #{member_email} -->
	<!-- all modify  -->
	<update id="firststepbytwo" parameterType="Home">
		update home set home_type =#{home_type} where home_seq =#{home_seq}
	</update>
	
	<update id="firststepbythree" parameterType="Home">
		update home set home_people = #{home_people} 
		  where home_seq = #{home_seq} 
	</update>
	
	<update id="firststepbyfore" parameterType="Home">
		update home set home_nation = #{home_nation} , home_addr1 = #{home_addr1} , home_addr2 = #{home_addr2}, home_addr3 = #{home_addr3},
		 home_addr4 = #{home_addr4} , home_lat = #{home_lat} , home_lng=#{home_lng}   where home_seq = #{home_seq}  
	</update>
	
	<update id="firststepbyfinal" parameterType="Home">
		update home set  home_amenities = #{home_amenities} , home_safety = #{home_safety},
		 home_step = '2'  where home_seq = #{home_seq} 
	</update>
	
	<update id="secondstepbyone" parameterType="Home">
		update home set home_main_pic = #{home_main_pic}  where home_seq = #{home_seq} 
	</update>
	
	
	<update id="secondstepbytwo" parameterType="Home">
		update home set home_contents = #{home_contents}  where home_seq = #{home_seq}  
	</update>
	
	<update id="secondstepbyfinal" parameterType="Home">
		update home set home_name = #{home_name} , home_step = '2'   where home_seq = #{home_seq}  
	</update>
	
	<update id="thirdstepbyone" parameterType="Home">
		update home set home_guest_access = #{home_guest_access} ,home_rules = #{home_rules} 
		 where home_seq = #{home_seq} 
	</update>
	
	<update id="thirdstepbytwo" parameterType="Home">
		update home set home_checkin_end = #{home_checkin_end} where home_seq = #{home_seq}  
	</update>
	
	<update id="thirdstepbythird" parameterType="Home">
		update home set home_min_stay = #{home_min_stay},home_max_stay = #{home_min_stay}
		 where home_seq = #{home_seq}  
	</update>
	
	<update id="thirdstepbyfore" parameterType="Home">
		update home set home_blocked_date = #{home_blocked_date} where home_seq = #{home_seq}  
	</update>
	
	<update id="thirdstepbyfive" parameterType="Home">
		update home set home_price = #{home_price}, home_step = '3'  where home_seq = #{home_seq}  
	</update>

	<select id="getSimilarHome" resultType="Home">
		select * from home where
		home_buildingtype = #{home_buildingType}
		and home_type=#{home_type} and
		home_addr1=#{home_addr1}
		and home_addr2 like '%'||#{home_addr2}||'%'
		and member_email != #{member_email}
	</select>

</mapper>
